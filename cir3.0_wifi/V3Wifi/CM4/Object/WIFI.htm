<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\CM4\Object\WIFI.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\CM4\Object\WIFI.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 24]: Last Updated: Mon Aug 07 14:22:01 2017
<BR><P>
<H3>Maximum Stack Usage =       1396 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
AppTaskMsgTxProc &rArr; DataReSend_Proc &rArr; WAE_ReSend &rArr; WAE_DataReSend &rArr; UARTDatapbCIR20SendPost &rArr; BuildptCIR20FrameStream &rArr; BuildptCIR20Frame &rArr; CalCRC16
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b0]">OS_CPU_SR_Save</a>
 <LI><a href="#[b1]">OS_CPU_SR_Restore</a>
 <LI><a href="#[1f4]">OSStartHighRdy</a>
 <LI><a href="#[1f3]">OSCtxSw</a>
 <LI><a href="#[1f1]">OSIntCtxSw</a>
 <LI><a href="#[b]">OS_CPU_PendSVHandler</a>
 <LI><a href="#[69]">CPU_IntDis</a>
 <LI><a href="#[2ed]">CPU_IntEn</a>
 <LI><a href="#[2ee]">CPU_SR_Save</a>
 <LI><a href="#[2ef]">CPU_SR_Restore</a>
 <LI><a href="#[2f0]">CPU_WaitForInt</a>
 <LI><a href="#[2f1]">CPU_WaitForExcept</a>
 <LI><a href="#[2f2]">CPU_CntLeadZeros</a>
 <LI><a href="#[2f3]">CPU_CntTrailZeros</a>
 <LI><a href="#[2f4]">CPU_RevBits</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2a4]">mem_set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a4]">mem_set</a><BR>
 <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[1e]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC0_IRQHandler</a><BR>
 <LI><a href="#[2a5]">str_up_case</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a5]">str_up_case</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[22]">ADC1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[3a]">ATIMER_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[42]">AppTaskMsgDispatchProc</a> from appmsgdispatchpro.o(.text) referenced from task.o(.text)
 <LI><a href="#[44]">AppTaskMsgRxProc</a> from appmsgrxpro.o(.text) referenced from task.o(.text)
 <LI><a href="#[43]">AppTaskMsgTxProc</a> from appmsgtxpro.o(.text) referenced from task.o(.text)
 <LI><a href="#[45]">AppTaskNetProc</a> from appnetpro.o(.text) referenced from task.o(.text)
 <LI><a href="#[e4]">App_TaskCheckUpdate</a> from updataslave.o(.text) referenced from updataslave.o(.text)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[3e]">CAN0_IRQHandler</a> from c_can.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[38]">CAN1_IRQHandler</a> from c_can.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[62]">CANSend</a> from c_can.o(.text) referenced from canrxpro.o(.text)
 <LI><a href="#[5e]">CAN_Pin_Init</a> from gpio.o(.text) referenced from target.o(.text)
 <LI><a href="#[259]">CanGetRecvFrameBufferPtrCallbackFuncFn</a> from canrxpro.o(.text) referenced from canrxpro.o(.text)
 <LI><a href="#[63]">CanRecvDataPackCallbackFuncFn</a> from canrxpro.o(.text) referenced from canrxpro.o(.text)
 <LI><a href="#[d]">DAC_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[f]">DMA_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[12]">ETH_IRQHandler</a> from eth_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[37]">EVRT_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[10]">EZH_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[47]">EthernetDataSend</a> from appnetpro.o(.text) referenced from appnetpro.o(.text)
 <LI><a href="#[46]">EthernetRevDataPost</a> from appnetpro.o(.text) referenced from appnetpro.o(.text)
 <LI><a href="#[11]">FLASH_EEPROM_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[35]">GINT0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[36]">GINT1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2d]">GPIO0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2e]">GPIO1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2f]">GPIO2_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[30]">GPIO3_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[31]">GPIO4_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[32]">GPIO5_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[33]">GPIO6_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[34]">GPIO7_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[1f]">I2C0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[20]">I2C1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[29]">I2S0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2a]">I2S1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[14]">LCD_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[e]">M0CORE_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[3d]">M0s_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[1d]">MCPWM_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[58]">OSTaskSwHook</a> from os_cpu_c.o(.text) referenced from os_cpu_a.o(.text)
 <LI><a href="#[61]">OSTimeGet</a> from os_time.o(.text) referenced from canrxpro.o(.text)
 <LI><a href="#[5a]">OSTmr_Task</a> from os_tmr.o(.text) referenced from os_tmr.o(.text)
 <LI><a href="#[b]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[c]">OS_CPU_SysTickHandler</a> from os_cpu_c.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[1e2]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[59]">OS_TaskReturn</a> from os_task.o(.text) referenced from os_cpu_c.o(.text)
 <LI><a href="#[1dd]">OS_TaskStat</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[3f]">QEI_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[18]">RIT_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[3b]">RTC_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[17]">SCT_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[13]">SDIO_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2c]">SGPIO_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2b]">SPIFI_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[48]">SPIFI_REG_FAMILY_Macronix_2Byte_Status</a> from spifilib_fam_mac_2b_stat.o(.text) referenced from mx66l51235f.o(.text)
 <LI><a href="#[21]">SPI_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[23]">SSP0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[60]">SSP0_Pin_Init</a> from gpio.o(.text) referenced from target.o(.text)
 <LI><a href="#[5f]">SSP0_Reset_Pin_Init</a> from gpio.o(.text) referenced from target.o(.text)
 <LI><a href="#[24]">SSP1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[5b]">SystemInit</a> from system_lpc43xx.o(.text) referenced from startup_lpc43xx.o(.text)
 <LI><a href="#[19]">TIMER0_IRQHandler</a> from appnetpro.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[1a]">TIMER1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[1b]">TIMER2_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[1c]">TIMER3_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[41]">TaskStartPrc</a> from taskstartprc.o(.text) referenced from main.o(.text)
 <LI><a href="#[25]">UART0_IRQHandler</a> from uart.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[26]">UART1_IRQHandler</a> from uart.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[27]">UART2_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[28]">UART3_IRQHandler</a> from uart.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[15]">USB0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[16]">USB1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[5d]">Uart_Pin_Init</a> from gpio.o(.text) referenced from target.o(.text)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[39]">VADC_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[3c]">WDT_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[5c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc43xx.o(.text)
 <LI><a href="#[65]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[64]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[55]">devRegister</a> from spifilib_fam_mac_2b_stat.o(.text) referenced from spifilib_fam_mac_2b_stat.o(.text)
 <LI><a href="#[54]">devSetup</a> from spifilib_fam_mac_2b_stat.o(.text) referenced from spifilib_fam_mac_2b_stat.o(.text)
 <LI><a href="#[4a]">deviceEraseAll</a> from spifilib_fam_mac_2b_stat.o(.text) referenced from spifilib_fam_mac_2b_stat.o(.text)
 <LI><a href="#[4b]">deviceEraseBlock</a> from spifilib_fam_mac_2b_stat.o(.text) referenced from spifilib_fam_mac_2b_stat.o(.text)
 <LI><a href="#[4c]">deviceEraseSubBlock</a> from spifilib_fam_mac_2b_stat.o(.text) referenced from spifilib_fam_mac_2b_stat.o(.text)
 <LI><a href="#[53]">deviceGetID</a> from spifilib_fam_mac_2b_stat.o(.text) referenced from spifilib_fam_mac_2b_stat.o(.text)
 <LI><a href="#[51]">deviceGetMemoryModeCmd</a> from spifilib_fam_mac_2b_stat.o(.text) referenced from spifilib_fam_mac_2b_stat.o(.text)
 <LI><a href="#[52]">deviceGetStatus</a> from spifilib_fam_mac_2b_stat.o(.text) referenced from spifilib_fam_mac_2b_stat.o(.text)
 <LI><a href="#[49]">deviceLockCmd</a> from spifilib_fam_mac_2b_stat.o(.text) referenced from spifilib_fam_mac_2b_stat.o(.text)
 <LI><a href="#[4d]">devicePageProgram</a> from spifilib_fam_mac_2b_stat.o(.text) referenced from spifilib_fam_mac_2b_stat.o(.text)
 <LI><a href="#[4e]">deviceRead</a> from spifilib_fam_mac_2b_stat.o(.text) referenced from spifilib_fam_mac_2b_stat.o(.text)
 <LI><a href="#[50]">deviceReset</a> from spifilib_fam_mac_2b_stat.o(.text) referenced from spifilib_fam_mac_2b_stat.o(.text)
 <LI><a href="#[4f]">deviceSetUnsetOptions</a> from spifilib_fam_mac_2b_stat.o(.text) referenced from spifilib_fam_mac_2b_stat.o(.text)
 <LI><a href="#[40]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[66]">nbns_listener</a> from at_nbns.o(i.nbns_listener) referenced from at_nbns.o(i.nbns_init)
 <LI><a href="#[56]">udprev_callback</a> from ethernetudp.o(.text) referenced from ethernetudp.o(.text)
 <LI><a href="#[57]">udpsend_callback</a> from ethernetudp.o(.text) referenced from ethernetudp.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(.text)
</UL>
<P><STRONG><a name="[2a9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[67]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[26e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2aa]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2ab]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2ac]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2ad]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2ae]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[40]"></a>main</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[6d]"></a>create_os_task</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = create_os_task &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStartPrc
</UL>

<P><STRONG><a name="[2af]"></a>create_os_mutex</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>create_os_queue</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = create_os_queue &rArr; OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStartPrc
</UL>

<P><STRONG><a name="[70]"></a>create_os_mem</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = create_os_mem &rArr; create_os_mempool &rArr; OSMemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_os_mempool
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStartPrc
</UL>

<P><STRONG><a name="[72]"></a>create_os_eventflag</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStartPrc
</UL>

<P><STRONG><a name="[74]"></a>create_os_sem</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStartPrc
</UL>

<P><STRONG><a name="[73]"></a>create_os_tmr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStartPrc
</UL>

<P><STRONG><a name="[41]"></a>TaskStartPrc</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, taskstartprc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = TaskStartPrc &rArr; Debug_Output_CAN &rArr; CCANDataSimpleSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_INIT
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Output_CAN
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_UpdateClock
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANbusControlPeriodHandle
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLightCtr_Handle
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_os_tmr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_os_sem
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_os_eventflag
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_os_mem
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_os_queue
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_os_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>CanMessageInit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = CanMessageInit &rArr; CCAN_RecMessageSet &rArr; CANMessageAdd &rArr; Chip_CCAN_SetMsgObject &rArr; Chip_CCAN_TransferMsgObject
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanNetAddrByPort
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAN_RecMessageSet
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[81]"></a>Unit_AddrRead</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Unit_AddrRead
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPara_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetProc
</UL>

<P><STRONG><a name="[83]"></a>AppPara_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AppPara_Init &rArr; Unit_AddrRead
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unit_AddrRead
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[78]"></a>App_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = App_Init &rArr; CanMessageInit &rArr; CCAN_RecMessageSet &rArr; CANMessageAdd &rArr; Chip_CCAN_SetMsgObject &rArr; Chip_CCAN_TransferMsgObject
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLightData_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPara_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMessageInit
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStartPrc
</UL>

<P><STRONG><a name="[86]"></a>HW_VerRead</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>

<P><STRONG><a name="[87]"></a>EquipmentSta</STRONG> (Thumb, 110 bytes, Stack size 104 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = EquipmentSta &rArr; CCANDataSimpleSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSimpleSendPost
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANStatusGet
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANHost_Handle
</UL>

<P><STRONG><a name="[8b]"></a>Version_Query_Handle</STRONG> (Thumb, 128 bytes, Stack size 168 bytes, appmsgdispatchpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = Version_Query_Handle &rArr; CCANDataSimpleSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSoftwareVersion
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSimpleSendPost
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANHost_Handle
</UL>

<P><STRONG><a name="[2b0]"></a>OpSwitchMachine_Handle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, appmsgdispatchpro.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>Uart_Data_Handle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appmsgdispatchpro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgDispatchProc
</UL>

<P><STRONG><a name="[8f]"></a>RouteTest</STRONG> (Thumb, 62 bytes, Stack size 104 bytes, appmsgdispatchpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = RouteTest &rArr; CCANDataSimpleSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSimpleSendPost
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANHost_Handle
</UL>

<P><STRONG><a name="[90]"></a>CCANHost_Handle</STRONG> (Thumb, 244 bytes, Stack size 80 bytes, appmsgdispatchpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = CCANHost_Handle &rArr; UpdateDataIn &rArr; SlaveUpdateReceive &rArr; CreatCheckTack &rArr; Debug_Output_Ethernet &rArr; EthernetDatapbCIR30FullSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_CheckPair
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDataIn
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseptCIRFrame
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comprehensive_Info_Handle
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RouteTest
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Query_Handle
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSimpleSendPost
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EquipmentSta
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgDispatchProc
</UL>

<P><STRONG><a name="[95]"></a>EthernetHost_Handle</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, appmsgdispatchpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = EthernetHost_Handle &rArr; UpdateDataIn &rArr; SlaveUpdateReceive &rArr; CreatCheckTack &rArr; Debug_Output_Ethernet &rArr; EthernetDatapbCIR30FullSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDataIn
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseptCIRFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgDispatchProc
</UL>

<P><STRONG><a name="[42]"></a>AppTaskMsgDispatchProc</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, appmsgdispatchpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = AppTaskMsgDispatchProc &rArr; CCANHost_Handle &rArr; UpdateDataIn &rArr; SlaveUpdateReceive &rArr; CreatCheckTack &rArr; Debug_Output_Ethernet &rArr; EthernetDatapbCIR30FullSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetHost_Handle
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANHost_Handle
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Data_Handle
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>AppTaskMsgTxProc</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, appmsgtxpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1396 + Unknown Stack Size
<LI>Call Chain = AppTaskMsgTxProc &rArr; DataReSend_Proc &rArr; WAE_ReSend &rArr; WAE_DataReSend &rArr; UARTDatapbCIR20SendPost &rArr; BuildptCIR20FrameStream &rArr; BuildptCIR20Frame &rArr; CalCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_Proc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgTx_QueueProc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_MsgTxQueue_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgTx_QueueAdd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>AppTaskMsgRxProc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, appmsgrxpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = AppTaskMsgRxProc &rArr; Uart_QueueProc &rArr; UART1_QueueProc &rArr; UART_Data_RevFmtProc &rArr; MQ_AddTail &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_QueueProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAN_QueueProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Can_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>create_os_mempool</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, memmanage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = create_os_mempool &rArr; OSMemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_os_mem
</UL>

<P><STRONG><a name="[a8]"></a>MemApply</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, memmanage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetRevDataPost
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetDataSend
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_AddTail
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_SetEvent
</UL>

<P><STRONG><a name="[99]"></a>MemFree</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, memmanage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = MemFree &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSendProc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetRevDataPost
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetDataSend
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgTx_QueueProc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgTxProc
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgDispatchProc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_AddTail
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_FreeEvent
</UL>

<P><STRONG><a name="[ab]"></a>TimerRef</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, apptime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = TimerRef &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Data_RevFmtProc
</UL>

<P><STRONG><a name="[244]"></a>TimerInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, apptime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_QueueProc
</UL>

<P><STRONG><a name="[85]"></a>BoardLightData_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ledcontrol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[ac]"></a>OS_at_Run</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ledcontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_at_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLightCtr_Handle
</UL>

<P><STRONG><a name="[af]"></a>BoardLightOn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ledcontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = BoardLightOn
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>BoardLightCtr_Handle</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, ledcontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BoardLightCtr_Handle &rArr; PrimaryCAN_Get &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrimaryCAN_Get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_at_Run
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStartPrc
</UL>

<P><STRONG><a name="[94]"></a>Comprehensive_Info_Handle</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, appdefine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Comprehensive_Info_Handle &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANHost_Handle
</UL>

<P><STRONG><a name="[b2]"></a>PrimaryCAN_Get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, appdefine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = PrimaryCAN_Get &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLightCtr_Handle
</UL>

<P><STRONG><a name="[19]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, appnetpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = TIMER0_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>Timer0_Init</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, appnetpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Timer0_Init &rArr; TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetProc
</UL>

<P><STRONG><a name="[45]"></a>AppTaskNetProc</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, appnetpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = AppTaskNetProc &rArr; NetSendProc &rArr; UDP_SendData &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_TcpNet
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_SendPort_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_ReceivePort_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_DataInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIpAdr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHostName
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnitJPByPort
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetPortByPort
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetAddrByPort
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMacAddrByPort
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSendProc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unit_AddrRead
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>GetOwnPort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, updateapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressOut
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatCheckTack
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCheckUpdate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockAck
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Check
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckDectect
</UL>

<P><STRONG><a name="[2b1]"></a>GetOwnName</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, updateapi.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>GetMasterCan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, updateapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataUpdate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressOut
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCheckUpdate
</UL>

<P><STRONG><a name="[2b2]"></a>UpdateModeSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, updateapi.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>GetOffsetUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, updateapi.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>ProgressMMI</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, updateapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressOut
</UL>

<P><STRONG><a name="[cf]"></a>AckDectect</STRONG> (Thumb, 54 bytes, Stack size 104 bytes, updataslave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = AckDectect &rArr; SendDataUpdate &rArr; EthernetDatapbCIR30FullSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataUpdate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOwnPort
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
</UL>

<P><STRONG><a name="[d2]"></a>MD5_Check</STRONG> (Thumb, 376 bytes, Stack size 696 bytes, updataslave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = MD5_Check &rArr; ProgressOut &rArr; CCANDataSimpleSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash_Update
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressOut
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOwnPort
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCheckUpdate
</UL>

<P><STRONG><a name="[e1]"></a>SaveFileToFlash</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, updataslave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SaveFileToFlash &rArr; WriteFlash_Update &rArr; SSP_Write &rArr; SPI_Program &rArr; SPI_deviceProgram &rArr; SPI_deviceGetStatus &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
</UL>

<P><STRONG><a name="[e3]"></a>BlockAck</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, updataslave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = BlockAck &rArr; SendDataUpdate &rArr; EthernetDatapbCIR30FullSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataUpdate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOwnPort
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
</UL>

<P><STRONG><a name="[e4]"></a>App_TaskCheckUpdate</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, updataslave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = App_TaskCheckUpdate &rArr; MD5_Check &rArr; ProgressOut &rArr; CCANDataSimpleSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBootConfigArea
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataUpdate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Output_Ethernet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Check
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMasterCan
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOwnPort
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> updataslave.o(.text)
</UL>
<P><STRONG><a name="[e9]"></a>CreatCheckTack</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, updataslave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = CreatCheckTack &rArr; Debug_Output_Ethernet &rArr; EthernetDatapbCIR30FullSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Output_Ethernet
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOwnPort
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
</UL>

<P><STRONG><a name="[eb]"></a>SlaveUpdateReceive</STRONG> (Thumb, 1252 bytes, Stack size 72 bytes, updataslave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = SlaveUpdateReceive &rArr; CreatCheckTack &rArr; Debug_Output_Ethernet &rArr; EthernetDatapbCIR30FullSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataUpdate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetToBootloader
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressOut
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Output_Ethernet
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatCheckTack
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockAck
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFileToFlash
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckDectect
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMasterCan
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOwnPort
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDataIn
</UL>

<P><STRONG><a name="[93]"></a>UpdateDataIn</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, update.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = UpdateDataIn &rArr; SlaveUpdateReceive &rArr; CreatCheckTack &rArr; Debug_Output_Ethernet &rArr; EthernetDatapbCIR30FullSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetHost_Handle
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANHost_Handle
</UL>

<P><STRONG><a name="[ee]"></a>ResetToBootloader</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, update.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ResetToBootloader
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGU_SoftReset
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
</UL>

<P><STRONG><a name="[e2]"></a>WriteFlash_Update</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, update.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = WriteFlash_Update &rArr; SSP_Write &rArr; SPI_Program &rArr; SPI_deviceProgram &rArr; SPI_deviceGetStatus &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBootConfigArea
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFileToFlash
</UL>

<P><STRONG><a name="[d4]"></a>ReadFlash_Update</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, update.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ReadFlash_Update &rArr; SSP_Read &rArr; SPI_Read &rArr; SPI_deviceRead &rArr; SPI_deviceGetStatus &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Check
</UL>

<P><STRONG><a name="[d1]"></a>SendDataUpdate</STRONG> (Thumb, 174 bytes, Stack size 112 bytes, update.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = SendDataUpdate &rArr; EthernetDatapbCIR30FullSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetDatapbCIR30FullSendPost
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMasterCan
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetPortByPort
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanNetAddrByPort
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSimpleSendPost
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCheckUpdate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockAck
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckDectect
</UL>

<P><STRONG><a name="[de]"></a>ProgressOut</STRONG> (Thumb, 250 bytes, Stack size 256 bytes, update.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = ProgressOut &rArr; CCANDataSimpleSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnitChinaNameByPort
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressMMI
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMasterCan
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOwnPort
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSimpleSendPost
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Check
</UL>

<P><STRONG><a name="[e7]"></a>WriteBootConfigArea</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, update.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = WriteBootConfigArea &rArr; WriteFlash_Update &rArr; SSP_Write &rArr; SPI_Program &rArr; SPI_deviceProgram &rArr; SPI_deviceGetStatus &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCalCRC16
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCRC16
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_Update
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCheckUpdate
</UL>

<P><STRONG><a name="[ba]"></a>CGU_GetPCLKFrequency</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, lpc43xx_cgu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_UpdateClock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPClock
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[75]"></a>CGU_UpdateClock</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, lpc43xx_cgu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CGU_UpdateClock
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStartPrc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_Init
</UL>

<P><STRONG><a name="[fd]"></a>CGU_EntityConnect</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, lpc43xx_cgu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CGU_EntityConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_Init
</UL>

<P><STRONG><a name="[f9]"></a>CGU_EnableEntity</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, lpc43xx_cgu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_ConfigPWR
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_Init
</UL>

<P><STRONG><a name="[fe]"></a>CGU_SetPLL1</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, lpc43xx_cgu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_Init
</UL>

<P><STRONG><a name="[fc]"></a>CGU_SetXTALOSC</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, lpc43xx_cgu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_Init
</UL>

<P><STRONG><a name="[fb]"></a>CGU_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lpc43xx_cgu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_UpdateClock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_SetXTALOSC
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_SetPLL1
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EnableEntity
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
</UL>

<P><STRONG><a name="[100]"></a>CGU_GetBaseStatus</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, lpc43xx_cgu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_ConfigPWR
</UL>

<P><STRONG><a name="[ff]"></a>CGU_ConfigPWR</STRONG> (Thumb, 672 bytes, Stack size 16 bytes, lpc43xx_cgu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_ConfigPWR
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetBaseStatus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EnableEntity
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_ConfigPWR
</UL>

<P><STRONG><a name="[2b4]"></a>CGU_SetDIV</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lpc43xx_cgu.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>CGU_SetPLL0</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lpc43xx_cgu.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>CGU_SetPLL0audio</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, lpc43xx_cgu.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>CGU_FrequencyMonitor</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, lpc43xx_cgu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_RealFrequencyCompare
</UL>

<P><STRONG><a name="[101]"></a>CGU_RealFrequencyCompare</STRONG> (Thumb, 64 bytes, Stack size 36 bytes, lpc43xx_cgu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_FrequencyMonitor
</UL>

<P><STRONG><a name="[fa]"></a>scu_pinmux</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, lpc43xx_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = scu_pinmux
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EnableEntity
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMR_GPIO_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Reset_Pin_Init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Pin_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Pin_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Reset_Pin_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Pin_Init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_GPIO_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWVer_GPIO_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Pin_Init
</UL>

<P><STRONG><a name="[105]"></a>UART_Init</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, lpc43xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig
</UL>

<P><STRONG><a name="[107]"></a>UART_TxCmd</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc43xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>

<P><STRONG><a name="[106]"></a>UART_DeInit</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lpc43xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
</UL>

<P><STRONG><a name="[2b7]"></a>UART_ConfigStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc43xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>UART_SendByte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc43xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>

<P><STRONG><a name="[10b]"></a>UART_ReceiveByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc43xx_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>

<P><STRONG><a name="[108]"></a>UART_Send</STRONG> (Thumb, 162 bytes, Stack size 36 bytes, lpc43xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[10a]"></a>UART_Receive</STRONG> (Thumb, 112 bytes, Stack size 28 bytes, lpc43xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>

<P><STRONG><a name="[2b8]"></a>UART_ForceBreak</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpc43xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>UART_IntConfig</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, lpc43xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig
</UL>

<P><STRONG><a name="[2b9]"></a>UART_GetLineStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc43xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>UART_CheckBusy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc43xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[190]"></a>UART_FIFOConfig</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, lpc43xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig
</UL>

<P><STRONG><a name="[2ba]"></a>UART_FIFOConfigStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc43xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>UART_ABCmd</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, lpc43xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>UART_IrDAInvtInputCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpc43xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>UART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc43xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>UART_IrDAPulseDivConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lpc43xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>UART_FullModemForcePinState</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, lpc43xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>UART_FullModemConfigMode</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lpc43xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>UART_FullModemGetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc43xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>UART_RS485Config</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, lpc43xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>UART_RS485ReceiverCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lpc43xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>UART_RS485Send</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, lpc43xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485SendData
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485SendSlvAddr
</UL>

<P><STRONG><a name="[10d]"></a>UART_RS485SendSlvAddr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lpc43xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[10e]"></a>UART_RS485SendData</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lpc43xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[110]"></a>GPIO_SetDir</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpc43xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetDir
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMR_GPIO_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Reset_Pin_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Reset_Pin_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Pin_Init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_GPIO_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWVer_GPIO_Init
</UL>

<P><STRONG><a name="[112]"></a>GPIO_SetValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc43xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_FLASH_RdID
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceRead
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceProgram
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceEraseBlock
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceeEraseSubBlock
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvGetStatusRegister
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvSetWREN
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetValue
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMR_GPIO_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Reset_Pin_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Reset_Pin_Init
</UL>

<P><STRONG><a name="[114]"></a>GPIO_ClearValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc43xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_FLASH_RdID
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceRead
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceProgram
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceEraseBlock
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceeEraseSubBlock
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvGetStatusRegister
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvSetWREN
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ClearValue
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Codec_Reset_Pin_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Reset_Pin_Init
</UL>

<P><STRONG><a name="[82]"></a>GPIO_ReadValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc43xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_VerRead
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unit_AddrRead
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ReadValue
</UL>

<P><STRONG><a name="[10f]"></a>FIO_SetDir</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc43xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[111]"></a>FIO_SetValue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lpc43xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[113]"></a>FIO_ClearValue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lpc43xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[115]"></a>FIO_ReadValue</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, lpc43xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>

<P><STRONG><a name="[2c4]"></a>FIO_SetMask</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lpc43xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>I2C_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lpc43xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_Init &rArr; CGU_EntityConnect
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_INIT
</UL>

<P><STRONG><a name="[2c5]"></a>I2C_DeInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>I2C_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_INIT
</UL>

<P><STRONG><a name="[11b]"></a>I2C_IntCmd</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransferData
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveHandler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHandler
</UL>

<P><STRONG><a name="[11e]"></a>I2C_MasterHandler</STRONG> (Thumb, 514 bytes, Stack size 24 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>

<P><STRONG><a name="[121]"></a>I2C_SlaveHandler</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>

<P><STRONG><a name="[122]"></a>I2C_MasterTransferData</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetByte
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>

<P><STRONG><a name="[123]"></a>I2C_SlaveTransferData</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>

<P><STRONG><a name="[2c6]"></a>I2C_SetOwnSlaveAddr</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lpc43xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>I2C_MonitorModeConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lpc43xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>I2C_MonitorModeCmd</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>I2C_MonitorGetDatabuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>I2C_MonitorHandler</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lpc43xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>I2C_MasterTransferComplete</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>

<P><STRONG><a name="[125]"></a>I2C_SlaveTransferComplete</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_getNum
</UL>

<P><STRONG><a name="[126]"></a>SSP_Init</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, lpc43xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[2cb]"></a>SSP_DeInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc43xx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>SSP_GetDataSize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc43xx_ssp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReadWrite
</UL>

<P><STRONG><a name="[176]"></a>SSP_ConfigStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc43xx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[177]"></a>SSP_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc43xx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[2cc]"></a>SSP_LoopBackCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc43xx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>SSP_SlaveOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc43xx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>SSP_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpc43xx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC43xx_SPI_SendRecvByte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReadWrite
</UL>

<P><STRONG><a name="[128]"></a>SSP_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc43xx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC43xx_SPI_SendRecvByte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReadWrite
</UL>

<P><STRONG><a name="[127]"></a>SSP_ReadWrite</STRONG> (Thumb, 542 bytes, Stack size 36 bytes, lpc43xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReceiveData
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetDataSize
</UL>

<P><STRONG><a name="[17a]"></a>SSP_GetStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc43xx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_FLASH_RdID
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC43xx_SPI_SendRecvByte
</UL>

<P><STRONG><a name="[2ce]"></a>SSP_IntConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lpc43xx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>SSP_GetRawIntStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc43xx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>SSP_GetIntStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc43xx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>SSP_ClearIntPending</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpc43xx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>SSP_DMACmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lpc43xx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>TIM_GetIntStatus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lpc43xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>TIM_GetIntCaptureStatus</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, lpc43xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>TIM_ClearIntPending</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc43xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[2d5]"></a>TIM_ClearIntCapturePending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc43xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>TIM_ConfigStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc43xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>TIM_Init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lpc43xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converPtrToTimeNum
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
</UL>

<P><STRONG><a name="[2d7]"></a>TIM_DeInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc43xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc43xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
</UL>

<P><STRONG><a name="[12f]"></a>TIM_ResetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc43xx_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
</UL>

<P><STRONG><a name="[bc]"></a>TIM_ConfigMatch</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, lpc43xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ConfigMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
</UL>

<P><STRONG><a name="[2d8]"></a>TIM_UpdateMatchValue</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lpc43xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>TIM_ConfigCapture</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lpc43xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>TIM_GetCaptureValue</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lpc43xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>TIM_Waitus</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, lpc43xx_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitms
</UL>

<P><STRONG><a name="[130]"></a>TIM_Waitms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lpc43xx_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Waitus
</UL>

<P><STRONG><a name="[ef]"></a>RGU_SoftReset</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lpc43xx_rgu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetToBootloader
</UL>

<P><STRONG><a name="[2db]"></a>RGU_GetSource</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, lpc43xx_rgu.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>RGU_GetSignalStatus</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lpc43xx_rgu.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>CANStatusGet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, c_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EquipmentSta
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBusControlJudge
</UL>

<P><STRONG><a name="[3e]"></a>CAN0_IRQHandler</STRONG> (Thumb, 504 bytes, Stack size 64 bytes, c_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = CAN0_IRQHandler &rArr; freeMsgObject &rArr; Chip_CCAN_SetValidMsg &rArr; Chip_CCAN_TransferMsgObject
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLightOn
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeMsgObject
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_SetMsgObject
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_GetMsgObject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_ClearStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_GetInterruptMsg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_ClearNewDataFlag
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueue
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CAN1_IRQHandler</STRONG> (Thumb, 560 bytes, Stack size 64 bytes, c_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = CAN1_IRQHandler &rArr; freeMsgObject &rArr; Chip_CCAN_SetValidMsg &rArr; Chip_CCAN_TransferMsgObject
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLightOn
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeMsgObject
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_SetMsgObject
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_GetMsgObject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_ClearStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_GetInterruptMsg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_ClearNewDataFlag
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueue
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[13a]"></a>GetpCANIbyNum</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, c_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSend
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSendBufSet
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageAdd
</UL>

<P><STRONG><a name="[139]"></a>CANMessageAdd</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, c_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = CANMessageAdd &rArr; Chip_CCAN_SetMsgObject &rArr; Chip_CCAN_TransferMsgObject
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFreeMsgObject
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_SetMsgObject
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetpCANIbyNum
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAN_RecMessageSet
</UL>

<P><STRONG><a name="[13c]"></a>CANMessageClear</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, c_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeMsgObject
</UL>

<P><STRONG><a name="[13d]"></a>CANSendBufSet</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, c_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = CANSendBufSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetpCANIbyNum
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
</UL>

<P><STRONG><a name="[13e]"></a>CANInit</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, c_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = CANInit &rArr; Chip_CCAN_SetBitRate &rArr; configTimming
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeMsgObject
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_SetBitRate
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_ClearStatus
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSendBufSet
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetpCANIbyNum
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_INIT
</UL>

<P><STRONG><a name="[62]"></a>CANSend</STRONG> (Thumb, 442 bytes, Stack size 64 bytes, c_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = CANSend &rArr; freeMsgObject &rArr; Chip_CCAN_SetValidMsg &rArr; Chip_CCAN_TransferMsgObject
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFreeMsgObject
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeMsgObject
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_SetMsgObject
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetpCANIbyNum
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canrxpro.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>CCAN_RecMessageSet</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, c_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = CCAN_RecMessageSet &rArr; CANMessageAdd &rArr; Chip_CCAN_SetMsgObject &rArr; Chip_CCAN_TransferMsgObject
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMessageInit
</UL>

<P><STRONG><a name="[145]"></a>configTimming</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, ccan_18xx_43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = configTimming
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_SetBitRate
</UL>

<P><STRONG><a name="[13b]"></a>getFreeMsgObject</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ccan_18xx_43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getFreeMsgObject
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_AddReceiveID
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_Send
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSend
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageAdd
</UL>

<P><STRONG><a name="[143]"></a>Chip_CCAN_TransferMsgObject</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ccan_18xx_43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_CCAN_TransferMsgObject
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_SetValidMsg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_SetMsgObject
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_GetMsgObject
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_ClearNewDataFlag
</UL>

<P><STRONG><a name="[142]"></a>Chip_CCAN_SetValidMsg</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ccan_18xx_43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Chip_CCAN_SetValidMsg &rArr; Chip_CCAN_TransferMsgObject
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_TransferMsgObject
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeMsgObject
</UL>

<P><STRONG><a name="[135]"></a>freeMsgObject</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ccan_18xx_43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = freeMsgObject &rArr; Chip_CCAN_SetValidMsg &rArr; Chip_CCAN_TransferMsgObject
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_SetValidMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_DeleteReceiveID
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_Send
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSend
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageClear
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>Chip_CCAN_ClearStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ccan_18xx_43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_CCAN_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>Chip_CCAN_Init</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, ccan_18xx_43xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeMsgObject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_ClearStatus
</UL>

<P><STRONG><a name="[2dd]"></a>Chip_CCAN_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ccan_18xx_43xx.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>Chip_CCAN_SetBitRate</STRONG> (Thumb, 112 bytes, Stack size 60 bytes, ccan_18xx_43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Chip_CCAN_SetBitRate &rArr; configTimming
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configTimming
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
</UL>

<P><STRONG><a name="[137]"></a>Chip_CCAN_SetMsgObject</STRONG> (Thumb, 416 bytes, Stack size 36 bytes, ccan_18xx_43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Chip_CCAN_SetMsgObject &rArr; Chip_CCAN_TransferMsgObject
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_TransferMsgObject
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_AddReceiveID
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_Send
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSend
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageAdd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>

<P><STRONG><a name="[134]"></a>Chip_CCAN_GetMsgObject</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, ccan_18xx_43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Chip_CCAN_GetMsgObject &rArr; Chip_CCAN_TransferMsgObject
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_TransferMsgObject
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_DeleteReceiveID
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>Chip_CCAN_Send</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ccan_18xx_43xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFreeMsgObject
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeMsgObject
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_SetMsgObject
</UL>

<P><STRONG><a name="[147]"></a>Chip_CCAN_AddReceiveID</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, ccan_18xx_43xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFreeMsgObject
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_SetMsgObject
</UL>

<P><STRONG><a name="[148]"></a>Chip_CCAN_DeleteReceiveID</STRONG> (Thumb, 50 bytes, Stack size 36 bytes, ccan_18xx_43xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeMsgObject
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_GetMsgObject
</UL>

<P><STRONG><a name="[14e]"></a>SPIFI_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, mx66l51235f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SPIFI_Init &rArr; initializeSpifi &rArr; spifiInitDevice &rArr; spifiPartDetect &rArr; devDetect &rArr; findDeviceMatch &rArr; checkExtendedMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetOpts
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSpifi
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_INIT
</UL>

<P><STRONG><a name="[151]"></a>SPIFI_EraseSectors</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mx66l51235f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiEraseSector
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_WriteEx
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_Write
</UL>

<P><STRONG><a name="[153]"></a>SPIFI_Write</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, mx66l51235f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiGetSubBlockFromAddr
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiGetAddrFromBlock
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevGetInfo
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_EraseSectors
</UL>

<P><STRONG><a name="[157]"></a>SPIFI_EntireErase</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mx66l51235f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiErase
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevGetInfo
</UL>

<P><STRONG><a name="[159]"></a>SPIFI_Erase</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mx66l51235f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiErase
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
</UL>

<P><STRONG><a name="[15a]"></a>SPIFI_WriteEx</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, mx66l51235f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiProgram
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiGetSubBlockFromAddr
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiGetAddrFromBlock
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevGetInfo
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_EraseSectors
</UL>

<P><STRONG><a name="[14b]"></a>spifiRegisterFamily</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, spifilib_dev_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spifiRegisterFamily
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSpifi
</UL>

<P><STRONG><a name="[2de]"></a>spifiGetLibVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spifilib_dev_common.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>spifiInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, spifilib_dev_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spifiInit
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_ResetController
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetMEMCMD
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetIDATA
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSpifi
</UL>

<P><STRONG><a name="[2df]"></a>spifiDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spifilib_dev_common.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>spifiDevSetMemMode</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, spifilib_dev_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spifiDevSetMemMode
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_WaitRESET
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_ResetController
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetMEMCMD
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetIDATA
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevDeInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetOpts
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_WriteEx
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_Erase
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_EntireErase
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_Write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_EraseSectors
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_Init
</UL>

<P><STRONG><a name="[164]"></a>spifiDevInit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spifilib_dev_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
</UL>

<P><STRONG><a name="[165]"></a>spifiDevDeInit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spifilib_dev_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
</UL>

<P><STRONG><a name="[2e0]"></a>spifiReturnErrString</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spifilib_dev_common.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>spifiDevGetInfo</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, spifilib_dev_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_WriteEx
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_EntireErase
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_Write
</UL>

<P><STRONG><a name="[167]"></a>spifiDevGetMemoryMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spifilib_dev_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetOpts
</UL>

<P><STRONG><a name="[2e1]"></a>spifiGetSuppFamilyCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spifilib_dev_common.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>spifiGetSuppFamilyName</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, spifilib_dev_common.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>spifiGetHandleMemSize</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, spifilib_dev_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = spifiGetHandleMemSize &rArr; spifiPartDetect &rArr; devDetect &rArr; findDeviceMatch &rArr; checkExtendedMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiCalculateHandleSize
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPartDetect
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSpifi
</UL>

<P><STRONG><a name="[14d]"></a>spifiInitDevice</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, spifilib_dev_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = spifiInitDevice &rArr; spifiPartDetect &rArr; devDetect &rArr; findDeviceMatch &rArr; checkExtendedMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiCalculateHandleSize
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPartDetect
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSpifi
</UL>

<P><STRONG><a name="[14f]"></a>spifiDevSetOpts</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, spifilib_dev_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spifiDevSetOpts &rArr; spifiDevSetMemMode
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevGetMemoryMode
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_Init
</UL>

<P><STRONG><a name="[155]"></a>spifiGetAddrFromBlock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spifilib_dev_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_WriteEx
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_Write
</UL>

<P><STRONG><a name="[2e3]"></a>spifiGetAddrFromSubBlock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spifilib_dev_common.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>spifiGetBlockFromAddr</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, spifilib_dev_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiEraseByAddr
</UL>

<P><STRONG><a name="[156]"></a>spifiGetSubBlockFromAddr</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spifilib_dev_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_WriteEx
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_Write
</UL>

<P><STRONG><a name="[2e4]"></a>spifiGetSubBlockFromBlock</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spifilib_dev_common.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>spifiProgram</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, spifilib_dev_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_WriteEx
</UL>

<P><STRONG><a name="[2e5]"></a>spifiRead</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, spifilib_dev_common.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>spifiErase</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, spifilib_dev_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiEraseByAddr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_Erase
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_EntireErase
</UL>

<P><STRONG><a name="[152]"></a>spifiEraseSector</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, spifilib_dev_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_EraseSectors
</UL>

<P><STRONG><a name="[168]"></a>spifiEraseByAddr</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, spifilib_dev_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiGetBlockFromAddr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiErase
</UL>

<P><STRONG><a name="[48]"></a>SPIFI_REG_FAMILY_Macronix_2Byte_Status</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIFI_REG_FAMILY_Macronix_2Byte_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mx66l51235f.o(.text)
</UL>
<P><STRONG><a name="[175]"></a>SPI_FLASH_Init</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_FLASH_Init &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Para_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ConfigStructInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_INIT
</UL>

<P><STRONG><a name="[181]"></a>SSP_FLASH_RdID</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SSP_FLASH_RdID &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadWriteByte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetStatus
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Check
</UL>

<P><STRONG><a name="[18a]"></a>SSP_EntireErase</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, spiflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EraseBlock
</UL>

<P><STRONG><a name="[18b]"></a>SSP_Erase</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, spiflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EraseBlock
</UL>

<P><STRONG><a name="[18c]"></a>SSP_EraseSectors</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SSP_EraseSectors &rArr; SPI_EraseSector &rArr; SPI_deviceeEraseSubBlock &rArr; SPI_deviceGetStatus &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Write
</UL>

<P><STRONG><a name="[f0]"></a>SSP_Write</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SSP_Write &rArr; SPI_Program &rArr; SPI_deviceProgram &rArr; SPI_deviceGetStatus &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_EraseSectors
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_Update
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Check
</UL>

<P><STRONG><a name="[f1]"></a>SSP_Read</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SSP_Read &rArr; SPI_Read &rArr; SPI_deviceRead &rArr; SPI_deviceGetStatus &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash_Update
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Check
</UL>

<P><STRONG><a name="[25]"></a>UART0_IRQHandler</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = UART0_IRQHandler &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckBusy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UART1_IRQHandler</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = UART1_IRQHandler &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckBusy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>UART3_IRQHandler</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = UART3_IRQHandler &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckBusy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[193]"></a>GetpUIbyNum</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendBufSet
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRecBufSet
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_QueueProc
</UL>

<P><STRONG><a name="[9e]"></a>UartSend</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = UartSend &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetpUIbyNum
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckBusy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgTx_QueueProc
</UL>

<P><STRONG><a name="[194]"></a>UartRecBufSet</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = UartRecBufSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetpUIbyNum
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[195]"></a>UartSendBufSet</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = UartSendBufSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetpUIbyNum
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[196]"></a>UartInit</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = UartInit &rArr; UartConfig &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendBufSet
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRecBufSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetpUIbyNum
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_INIT
</UL>

<P><STRONG><a name="[198]"></a>read_PHY</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, eth_lpc43xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[199]"></a>write_PHY</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, eth_lpc43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_PHY
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[197]"></a>init_ethernet</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, eth_lpc43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_ethernet &rArr; write_PHY
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_PHY
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_PHY
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_descr_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_descr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
</UL>

<P><STRONG><a name="[278]"></a>int_enable_eth</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, eth_lpc43xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>

<P><STRONG><a name="[277]"></a>int_disable_eth</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eth_lpc43xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mem
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>

<P><STRONG><a name="[288]"></a>send_frame</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, eth_lpc43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
</UL>

<P><STRONG><a name="[12]"></a>ETH_IRQHandler</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, eth_lpc43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = ETH_IRQHandler &rArr; OSFlagPost &rArr; OS_FlagTaskRdy &rArr; OS_FlagUnlink
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_in_queue
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>UDP_SendData</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ethernetudp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UDP_SendData &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSendProc
</UL>

<P><STRONG><a name="[cb]"></a>UDP_ReceivePort_Init</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ethernetudp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UDP_ReceivePort_Init &rArr; udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetProc
</UL>

<P><STRONG><a name="[cc]"></a>UDP_SendPort_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ethernetudp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UDP_SendPort_Init &rArr; udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetProc
</UL>

<P><STRONG><a name="[1c5]"></a>UDP_DataSend</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ethernetudp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UDP_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetDataSendPost
</UL>

<P><STRONG><a name="[c8]"></a>UDP_DataInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ethernetudp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetProc
</UL>

<P><STRONG><a name="[2e6]"></a>SetMacAddr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ethernetset.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>SetHostName</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ethernetset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetHostName
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetProc
</UL>

<P><STRONG><a name="[c6]"></a>SetIpAdr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetIpAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetProc
</UL>

<P><STRONG><a name="[2e7]"></a>SetNetMask</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetset.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>SetDefWG</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetset.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>CalCRC8</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, crc.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>CheckCalCRC8</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, crc.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>CalCRC16</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CalCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBootConfigArea
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR20Frame
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR30Frame
</UL>

<P><STRONG><a name="[f8]"></a>CheckCalCRC16</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckCalCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBootConfigArea
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseptCIRFrame
</UL>

<P><STRONG><a name="[d3]"></a>md5_starts</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, md5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Check
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_MD5_Code2
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_MD5_Code
</UL>

<P><STRONG><a name="[1a2]"></a>md5_process</STRONG> (Thumb, 2326 bytes, Stack size 84 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = md5_process
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
</UL>

<P><STRONG><a name="[d5]"></a>md5_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_process
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Check
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_MD5_Code2
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_MD5_Code
</UL>

<P><STRONG><a name="[df]"></a>md5_finish</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = md5_finish &rArr; md5_update &rArr; md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Check
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_MD5_Code2
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_MD5_Code
</UL>

<P><STRONG><a name="[1a3]"></a>Cal_MD5_Code</STRONG> (Thumb, 40 bytes, Stack size 104 bytes, md5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
</UL>

<P><STRONG><a name="[1a4]"></a>Cal_MD5_Code2</STRONG> (Thumb, 90 bytes, Stack size 176 bytes, md5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[8e]"></a>GetSoftwareVersion</STRONG> (Thumb, 182 bytes, Stack size 160 bytes, version.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GetSoftwareVersion &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Query_Handle
</UL>

<P><STRONG><a name="[2eb]"></a>GetCfgAddrByPort</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cmddefine.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>GetCanAddrByPort</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, cmddefine.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanAddrByUnitJP
</UL>

<P><STRONG><a name="[c4]"></a>GetMacAddrByPort</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, cmddefine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetMacAddrByPort
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetProc
</UL>

<P><STRONG><a name="[c3]"></a>GetNetAddrByPort</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, cmddefine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetNetAddrByPort
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetProc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetAddrByUnitJP
</UL>

<P><STRONG><a name="[7f]"></a>GetCanNetAddrByPort</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, cmddefine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetCanNetAddrByPort
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataUpdate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Output_Ethernet
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMessageInit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSendPost
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanNetAddrByUnitJP
</UL>

<P><STRONG><a name="[1a9]"></a>GetPortByUnitJP</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, cmddefine.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanNetAddrByUnitJP
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetAddrByUnitJP
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanAddrByUnitJP
</UL>

<P><STRONG><a name="[1aa]"></a>GetCanAddrByUnitJP</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cmddefine.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPortByUnitJP
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanAddrByPort
</UL>

<P><STRONG><a name="[1ac]"></a>GetNetAddrByUnitJP</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cmddefine.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetAddrByPort
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPortByUnitJP
</UL>

<P><STRONG><a name="[1ad]"></a>GetCanNetAddrByUnitJP</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, cmddefine.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanNetAddrByPort
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPortByUnitJP
</UL>

<P><STRONG><a name="[c2]"></a>GetUnitJPByPort</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, cmddefine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetUnitJPByPort
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetProc
</UL>

<P><STRONG><a name="[ca]"></a>GetNetPortByPort</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, cmddefine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetNetPortByPort
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataUpdate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Output_Ethernet
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetProc
</UL>

<P><STRONG><a name="[f4]"></a>GetUnitChinaNameByPort</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, cmddefine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetUnitChinaNameByPort
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressOut
</UL>

<P><STRONG><a name="[1c3]"></a>GetCanPriDataTypeByOpCmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cmddefine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetCanPriDataTypeByOpCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSendPost
</UL>

<P><STRONG><a name="[1ae]"></a>WAE_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dataresend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WAE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_Init
</UL>

<P><STRONG><a name="[92]"></a>WAE_CheckPair</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, dataresend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = WAE_CheckPair &rArr; WAE_FreeEvent &rArr; MemFree &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_FreeEvent
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANHost_Handle
</UL>

<P><STRONG><a name="[a2]"></a>DataReSend_Proc</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, dataresend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1388 + Unknown Stack Size
<LI>Call Chain = DataReSend_Proc &rArr; WAE_ReSend &rArr; WAE_DataReSend &rArr; UARTDatapbCIR20SendPost &rArr; BuildptCIR20FrameStream &rArr; BuildptCIR20Frame &rArr; CalCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_ReSend
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgTxProc
</UL>

<P><STRONG><a name="[84]"></a>DataReSend_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dataresend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = DataReSend_Init &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[1b9]"></a>DataReSend_SetEvent</STRONG> (Thumb, 296 bytes, Stack size 104 bytes, dataresend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_FreeEvent
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_SetEvent
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_Set
</UL>

<P><STRONG><a name="[1ba]"></a>FlowNumAdd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, datatransfer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = FlowNumAdd &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR30SendPost
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetDataSendPost
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSendPost
</UL>

<P><STRONG><a name="[1b6]"></a>FlowNumGet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, datatransfer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = FlowNumGet &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_Set
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_DataReSend
</UL>

<P><STRONG><a name="[1bb]"></a>MQ_AddTail</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, datatransfer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = MQ_AddTail &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemApply
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvDataPackCallbackFuncFn
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_QueueProc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Data_RevFmtProc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Common_SendData
</UL>

<P><STRONG><a name="[1bc]"></a>Common_SendData</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, datatransfer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = Common_SendData &rArr; MQ_AddTail &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_AddTail
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR30SendPost
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR20SendPost
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSendPost
</UL>

<P><STRONG><a name="[1b4]"></a>UARTDatapbCIR30SendPost</STRONG> (Thumb, 102 bytes, Stack size 104 bytes, datatransfer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = UARTDatapbCIR30SendPost &rArr; Common_SendData &rArr; MQ_AddTail &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR30Frame
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Common_SendData
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowNumAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR30FullSendPost
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR30SimpleSendPost
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_DataReSend
</UL>

<P><STRONG><a name="[1b7]"></a>UARTDatapbCIR20SendPost</STRONG> (Thumb, 76 bytes, Stack size 88 bytes, datatransfer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1268 + Unknown Stack Size
<LI>Call Chain = UARTDatapbCIR20SendPost &rArr; BuildptCIR20FrameStream &rArr; BuildptCIR20Frame &rArr; CalCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR20FrameStream
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Common_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR20SimpleSendPost
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_DataReSend
</UL>

<P><STRONG><a name="[1c0]"></a>UARTDatapbCIR20SimpleSendPost</STRONG> (Thumb, 114 bytes, Stack size 96 bytes, datatransfer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_Set
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR20SendPost
</UL>

<P><STRONG><a name="[1c1]"></a>UARTDatapbCIR30SimpleSendPost</STRONG> (Thumb, 122 bytes, Stack size 104 bytes, datatransfer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_Set
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR30SendPost
</UL>

<P><STRONG><a name="[1c2]"></a>UARTDatapbCIR30FullSendPost</STRONG> (Thumb, 90 bytes, Stack size 104 bytes, datatransfer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_Set
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR30SendPost
</UL>

<P><STRONG><a name="[1b3]"></a>CCANDataSendPost</STRONG> (Thumb, 270 bytes, Stack size 136 bytes, datatransfer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = CCANDataSendPost &rArr; Common_SendData &rArr; MQ_AddTail &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanNetAddrByPort
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR30Frame
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Common_SendData
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowNumAdd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanPriDataTypeByOpCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSimpleSendPost
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataFullSendPost
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_DataReSend
</UL>

<P><STRONG><a name="[8a]"></a>CCANDataSimpleSendPost</STRONG> (Thumb, 122 bytes, Stack size 104 bytes, datatransfer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = CCANDataSimpleSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_Set
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSendPost
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataUpdate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressOut
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANHost_Handle
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RouteTest
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Query_Handle
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EquipmentSta
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Output_CAN
</UL>

<P><STRONG><a name="[1c4]"></a>CCANDataFullSendPost</STRONG> (Thumb, 90 bytes, Stack size 104 bytes, datatransfer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_Set
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSendPost
</UL>

<P><STRONG><a name="[1b5]"></a>EthernetDataSendPost</STRONG> (Thumb, 106 bytes, Stack size 104 bytes, datatransfer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = EthernetDataSendPost &rArr; BuildptCIR30Frame &rArr; CalCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_DataSend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR30Frame
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowNumAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetDatapbCIR30FullSendPost
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_DataReSend
</UL>

<P><STRONG><a name="[f2]"></a>EthernetDatapbCIR30FullSendPost</STRONG> (Thumb, 90 bytes, Stack size 104 bytes, datatransfer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = EthernetDatapbCIR30FullSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_Set
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetDataSendPost
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataUpdate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Output_Ethernet
</UL>

<P><STRONG><a name="[1c7]"></a>CANBusControHandle</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, canbuscontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[7c]"></a>CANbusControlPeriodHandle</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, canbuscontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = CANbusControlPeriodHandle &rArr; CANBusControlJudge &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBusControlJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStartPrc
</UL>

<P><STRONG><a name="[1c8]"></a>CANNormalCntGet</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, canbuscontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[1c9]"></a>UnitConfigInfo_Get</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, canbuscontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[1cb]"></a>UnPackDLE</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ptcir.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveHeadAndTail
</UL>

<P><STRONG><a name="[1ca]"></a>RemoveHeadAndTail</STRONG> (Thumb, 124 bytes, Stack size 1048 bytes, ptcir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnPackDLE
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1cd]"></a>PackDLE</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ptcir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PackDLE
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR20FrameStreamByptCIR20Frame
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR20FrameStream
</UL>

<P><STRONG><a name="[1cc]"></a>BuildptCIR20Frame</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, ptcir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BuildptCIR20Frame &rArr; CalCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCRC16
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR20FrameStream
</UL>

<P><STRONG><a name="[1bf]"></a>BuildptCIR20FrameStream</STRONG> (Thumb, 120 bytes, Stack size 1112 bytes, ptcir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1180<LI>Call Chain = BuildptCIR20FrameStream &rArr; BuildptCIR20Frame &rArr; CalCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR20Frame
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackDLE
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR20SendPost
</UL>

<P><STRONG><a name="[1ce]"></a>BuildptCIR20FrameStreamByptCIR20Frame</STRONG> (Thumb, 88 bytes, Stack size 1048 bytes, ptcir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackDLE
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1be]"></a>BuildptCIR30Frame</STRONG> (Thumb, 254 bytes, Stack size 64 bytes, ptcir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BuildptCIR30Frame &rArr; CalCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCRC16
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR30FrameStream
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR30SendPost
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetDataSendPost
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSendPost
</UL>

<P><STRONG><a name="[1cf]"></a>BuildptCIR30FrameStream</STRONG> (Thumb, 124 bytes, Stack size 96 bytes, ptcir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR30Frame
</UL>

<P><STRONG><a name="[1d0]"></a>BuildptCIR30FrameStreamByptCIR30Frame</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ptcir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[91]"></a>ParseptCIRFrame</STRONG> (Thumb, 502 bytes, Stack size 24 bytes, ptcir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ParseptCIRFrame &rArr; CheckCalCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCalCRC16
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetHost_Handle
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANHost_Handle
</UL>

<P><STRONG><a name="[1d1]"></a>CanClearAllRecvBuffer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ptcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanClearAllRecvBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>

<P><STRONG><a name="[1d2]"></a>CanInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ptcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanInit &rArr; CanClearAllRecvBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanClearAllRecvBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Can_Init
</UL>

<P><STRONG><a name="[254]"></a>CanGetTickCountCallbackFunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ptcan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Can_Init
</UL>

<P><STRONG><a name="[256]"></a>CanSetRecvTimeOut</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ptcan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Can_Init
</UL>

<P><STRONG><a name="[255]"></a>CanSetRecvTimeOutEnabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ptcan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Can_Init
</UL>

<P><STRONG><a name="[a0]"></a>CanSendDataPackToCanBus</STRONG> (Thumb, 650 bytes, Stack size 56 bytes, ptcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CanSendDataPackToCanBus
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgTx_QueueProc
</UL>

<P><STRONG><a name="[257]"></a>CanSendFrameCallbackFunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ptcan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Can_Init
</UL>

<P><STRONG><a name="[1d3]"></a>CanRemoveTimeOutDataPack</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ptcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanRemoveTimeOutDataPack
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAddFrameToRecvBuffer
</UL>

<P><STRONG><a name="[1d4]"></a>CanRecvFirstFrame</STRONG> (Thumb, 474 bytes, Stack size 48 bytes, ptcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CanRecvFirstFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAddFrameToRecvBuffer
</UL>

<P><STRONG><a name="[1d5]"></a>CanRecvMidFrame</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, ptcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CanRecvMidFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAddFrameToRecvBuffer
</UL>

<P><STRONG><a name="[1d6]"></a>CanRecvLastFrame</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, ptcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CanRecvLastFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAddFrameToRecvBuffer
</UL>

<P><STRONG><a name="[258]"></a>CanRecvDataPackCallbackFunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ptcan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Can_Init
</UL>

<P><STRONG><a name="[1d7]"></a>CanAddFrameToRecvBuffer</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, ptcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CanAddFrameToRecvBuffer &rArr; CanRecvLastFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvLastFrame
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvMidFrame
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvFirstFrame
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRemoveTimeOutDataPack
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAN_QueueProc
</UL>

<P><STRONG><a name="[25a]"></a>CanGetRecvFrameBufferPtrCallbackFunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ptcan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Can_Init
</UL>

<P><STRONG><a name="[b0]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLightOn
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLightCtr_Handle
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendBufSet
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRecBufSet
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSend
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSendBufSet
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageClear
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageAdd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueue
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGetID
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[b1]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLightOn
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLightCtr_Handle
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendBufSet
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRecBufSet
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSend
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSendBufSet
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageClear
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageAdd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueue
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGetID
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[1f4]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[1f3]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1f1]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[b]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1e8]"></a>OSInitHookBegin</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1ef]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1f9]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[219]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1e3]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[221]"></a>OSTaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[1e0]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[215]"></a>OSTaskStkInit</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[58]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[1f8]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[1d8]"></a>OSTimeTickHook</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[c]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = OS_CPU_SysTickHandler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStartPrc
</UL>

<P><STRONG><a name="[1db]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[1dd]"></a>OS_TaskStat</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[1e2]"></a>OS_TaskIdle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[1e6]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[6a]"></a>OSInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[b3]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetDatapbCIR30FullSendPost
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCheckUpdate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrimaryCAN_Get
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_Proc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_CheckPair
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comprehensive_Info_Handle
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSimpleSendPost
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitConfigInfo_Get
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANNormalCntGet
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBusControHandle
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBusControlJudge
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataFullSendPost
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR30FullSendPost
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR30SimpleSendPost
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR20SimpleSendPost
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowNumAdd
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowNumGet
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_SetEvent
</UL>

<P><STRONG><a name="[1f2]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>

<P><STRONG><a name="[b4]"></a>OSSchedUnlock</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetDatapbCIR30FullSendPost
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCheckUpdate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrimaryCAN_Get
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_Proc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_CheckPair
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comprehensive_Info_Handle
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSimpleSendPost
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitConfigInfo_Get
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANNormalCntGet
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBusControHandle
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBusControlJudge
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataFullSendPost
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR30FullSendPost
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR30SimpleSendPost
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR20SimpleSendPost
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowNumAdd
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowNumGet
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_SetEvent
</UL>

<P><STRONG><a name="[6c]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStartPrc
</UL>

<P><STRONG><a name="[1da]"></a>OSTimeTick</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[2ec]"></a>OSVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1f6]"></a>OS_EventTaskRemove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[1f5]"></a>OS_EventTaskRdy</STRONG> (Thumb, 118 bytes, Stack size 36 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
</UL>

<P><STRONG><a name="[20a]"></a>OS_EventTaskWait</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[207]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[21d]"></a>OS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[1ff]"></a>OS_StrLen</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
</UL>

<P><STRONG><a name="[1f7]"></a>OS_TCBInit</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[1fa]"></a>OSFlagAccept</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c7]"></a>OSFlagCreate</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSFlagCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetProc
</UL>

<P><STRONG><a name="[1fc]"></a>OS_FlagUnlink</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[1fd]"></a>OSFlagDel</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1fe]"></a>OSFlagNameGet</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[200]"></a>OSFlagNameSet</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[cd]"></a>OSFlagPend</STRONG> (Thumb, 634 bytes, Stack size 72 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetProc
</UL>

<P><STRONG><a name="[202]"></a>OSFlagPendGetFlagsRdy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[be]"></a>OSFlagPost</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = OSFlagPost &rArr; OS_FlagTaskRdy &rArr; OS_FlagUnlink
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetDataSend
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[203]"></a>OSFlagQuery</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1eb]"></a>OS_FlagInit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[a7]"></a>OSMemCreate</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSMemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_os_mempool
</UL>

<P><STRONG><a name="[a9]"></a>OSMemGet</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemApply
</UL>

<P><STRONG><a name="[204]"></a>OSMemNameGet</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[205]"></a>OSMemNameSet</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[aa]"></a>OSMemPut</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
</UL>

<P><STRONG><a name="[206]"></a>OSMemQuery</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1ec]"></a>OS_MemInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c0]"></a>OSQAccept</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSQAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSendProc
</UL>

<P><STRONG><a name="[6f]"></a>OSQCreate</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_os_queue
</UL>

<P><STRONG><a name="[208]"></a>OSQDel</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[209]"></a>OSQFlush</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[96]"></a>OSQPend</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSQPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgTx_QueueProc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgTxProc
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgDispatchProc
</UL>

<P><STRONG><a name="[20b]"></a>OSQPendAbort</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[9c]"></a>OSQPost</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetRevDataPost
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetDataSend
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgTx_QueueAdd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_AddTail
</UL>

<P><STRONG><a name="[20c]"></a>OSQPostFront</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[20d]"></a>OSQPostOpt</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[9f]"></a>OSQQuery</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSQQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgTx_QueueProc
</UL>

<P><STRONG><a name="[1ed]"></a>OS_QInit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[20e]"></a>OSSemAccept</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[ea]"></a>OSSemCreate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatCheckTack
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[20f]"></a>OSSemDel</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[e5]"></a>OSSemPend</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCheckUpdate
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[210]"></a>OSSemPendAbort</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[ed]"></a>OSSemPost</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>

<P><STRONG><a name="[211]"></a>OSSemQuery</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[212]"></a>OSSemSet</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[213]"></a>OSTaskChangePrio</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[214]"></a>OSTaskCreate</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>

<P><STRONG><a name="[216]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[6b]"></a>OSTaskCreateExt</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatCheckTack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_os_task
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[217]"></a>OSTaskDel</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_FlagUnlink
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[21a]"></a>OSTaskDelReq</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[21b]"></a>OSTaskResume</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1dc]"></a>OSTaskStkChk</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[1df]"></a>OSTaskSuspend</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[21c]"></a>OSTaskQuery</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
</UL>

<P><STRONG><a name="[21e]"></a>OSTaskRegGet</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[21f]"></a>OSTaskRegGetID</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[220]"></a>OSTaskRegSet</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[59]"></a>OS_TaskReturn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_FlagUnlink
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(.text)
</UL>
<P><STRONG><a name="[1de]"></a>OSTimeDly</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[7a]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCheckUpdate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Check
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgRxProc
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStartPrc
</UL>

<P><STRONG><a name="[222]"></a>OSTimeDlyResume</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[61]"></a>OSTimeGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRef
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_Proc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANbusControlPeriodHandle
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLightCtr_Handle
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStartPrc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_QueueProc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Data_RevFmtProc
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_ReSend
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_SetEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canrxpro.o(.text)
</UL>
<P><STRONG><a name="[223]"></a>OSTimeSet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[224]"></a>OSTmrCreate</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Alloc
</UL>

<P><STRONG><a name="[226]"></a>OSTmrDel</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Free
</UL>

<P><STRONG><a name="[229]"></a>OSTmrNameGet</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[22a]"></a>OSTmrRemainGet</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[22b]"></a>OSTmrStateGet</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[22c]"></a>OSTmrStart</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
</UL>

<P><STRONG><a name="[22e]"></a>OSTmrStop</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
</UL>

<P><STRONG><a name="[1d9]"></a>OSTmrSignal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[1ee]"></a>OSTmr_Init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[69]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ed]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>CPU_CntTrailZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ATIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EVRT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EZH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_EEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>GINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>GINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>GPIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>GPIO3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>GPIO4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>GPIO5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>GPIO6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>GPIO7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2S1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>M0CORE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>M0s_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SGPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>USB1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>VADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[235]"></a>SetClock</STRONG> (Thumb, 386 bytes, Stack size 12 bytes, system_lpc43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2f5]"></a>MeasureFreq</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, system_lpc43xx.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>GetClkSel</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, system_lpc43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClockFreq
</UL>

<P><STRONG><a name="[230]"></a>GetClockFreq</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, system_lpc43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GetClockFreq &rArr; GetPLL1Param
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPLL1Param
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[233]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, system_lpc43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SystemCoreClockUpdate &rArr; GetClockFreq &rArr; GetPLL1Param
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[236]"></a>SetFlashAcceleration</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, system_lpc43xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[234]"></a>Peripheral_Reset</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_lpc43xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5b]"></a>SystemInit</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, system_lpc43xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; GetClockFreq &rArr; GetPLL1Param
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peripheral_Reset
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFlashAcceleration
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(.text)
</UL>
<P><STRONG><a name="[237]"></a>SPI_Check</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SPI_Check &rArr; SSP_Write &rArr; SPI_Program &rArr; SPI_deviceProgram &rArr; SPI_deviceGetStatus &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Read
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_FLASH_RdID
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_INIT
</UL>

<P><STRONG><a name="[77]"></a>Target_INIT</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = Target_INIT &rArr; SPI_Check &rArr; SSP_Write &rArr; SPI_Program &rArr; SPI_deviceProgram &rArr; SPI_deviceGetStatus &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Pin_Init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_GPIO_Init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWVer_GPIO_Init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStartPrc
</UL>

<P><STRONG><a name="[238]"></a>LED_Init</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_INIT
</UL>

<P><STRONG><a name="[ad]"></a>LED_On</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_at_Run
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLightCtr_Handle
</UL>

<P><STRONG><a name="[ae]"></a>LED_Off</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_at_Run
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLightCtr_Handle
</UL>

<P><STRONG><a name="[5d]"></a>Uart_Pin_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Uart_Pin_Init &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>CAN_Pin_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CAN_Pin_Init &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[23c]"></a>Net_Pin_Init</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_INIT
</UL>

<P><STRONG><a name="[23a]"></a>HWVer_GPIO_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HWVer_GPIO_Init &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_INIT
</UL>

<P><STRONG><a name="[23b]"></a>Location_GPIO_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Location_GPIO_Init &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_INIT
</UL>

<P><STRONG><a name="[5f]"></a>SSP0_Reset_Pin_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SSP0_Reset_Pin_Init &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>SSP0_Pin_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SSP0_Pin_Init &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[23e]"></a>I2S_Pin_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>

<P><STRONG><a name="[23f]"></a>Codec_Reset_Pin_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>

<P><STRONG><a name="[240]"></a>GSMR_GPIO_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitUs
</UL>

<P><STRONG><a name="[241]"></a>UART_Data_RevFmtProc</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, uartrxpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = UART_Data_RevFmtProc &rArr; MQ_AddTail &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRef
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_AddTail
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_QueueProc
</UL>

<P><STRONG><a name="[246]"></a>UART3_QueueProc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uartrxpro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_QueueProc
</UL>

<P><STRONG><a name="[242]"></a>UART1_QueueProc</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, uartrxpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = UART1_QueueProc &rArr; UART_Data_RevFmtProc &rArr; MQ_AddTail &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetpUIbyNum
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Data_RevFmtProc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetpUartbyNum
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_AddTail
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_QueueProc
</UL>

<P><STRONG><a name="[245]"></a>UART0_QueueProc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uartrxpro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_QueueProc
</UL>

<P><STRONG><a name="[a6]"></a>Uart_QueueProc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uartrxpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = Uart_QueueProc &rArr; UART1_QueueProc &rArr; UART_Data_RevFmtProc &rArr; MQ_AddTail &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_QueueProc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_QueueProc
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_QueueProc
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgRxProc
</UL>

<P><STRONG><a name="[a4]"></a>Board_Uart_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, uartrxpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Board_Uart_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgRxProc
</UL>

<P><STRONG><a name="[279]"></a>sys_error</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_socket
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>

<P><STRONG><a name="[247]"></a>init_system</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_system &rArr; arp_notify &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
</UL>

<P><STRONG><a name="[24f]"></a>run_system</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = run_system &rArr; igmp_run_host &rArr; igmp_send_report &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_run_local
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_run_host
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_run_engine
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_TcpNet
</UL>

<P><STRONG><a name="[2f6]"></a>dhcp_disable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>ppp_send_frame</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[2a2]"></a>slip_send_frame</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[293]"></a>tcp_process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_run_local
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[2f7]"></a>sntp_get_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>CCAN_QueueProc</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, canrxpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CCAN_QueueProc &rArr; CanAddFrameToRecvBuffer &rArr; CanRecvLastFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAddFrameToRecvBuffer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgRxProc
</UL>

<P><STRONG><a name="[259]"></a>CanGetRecvFrameBufferPtrCallbackFuncFn</STRONG> (Thumb, 270 bytes, Stack size 12 bytes, canrxpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CanGetRecvFrameBufferPtrCallbackFuncFn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canrxpro.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>Board_Can_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, canrxpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Board_Can_Init &rArr; CanInit &rArr; CanClearAllRecvBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanGetRecvFrameBufferPtrCallbackFunc
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvDataPackCallbackFunc
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendFrameCallbackFunc
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSetRecvTimeOutEnabled
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSetRecvTimeOut
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanGetTickCountCallbackFunc
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgRxProc
</UL>

<P><STRONG><a name="[7d]"></a>Debug_Output_CAN</STRONG> (Thumb, 110 bytes, Stack size 320 bytes, debugout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = Debug_Output_CAN &rArr; CCANDataSimpleSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSimpleSendPost
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStartPrc
</UL>

<P><STRONG><a name="[e8]"></a>Debug_Output_Ethernet</STRONG> (Thumb, 176 bytes, Stack size 344 bytes, debugout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Debug_Output_Ethernet &rArr; EthernetDatapbCIR30FullSendPost &rArr; DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetDatapbCIR30FullSendPost
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetPortByPort
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanNetAddrByPort
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatCheckTack
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCheckUpdate
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitUs
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_SendData
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHostName
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetRevDataPost
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetDataSend
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCAN_QueueProc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendDataPackToCanBus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseptCIRFrame
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSoftwareVersion
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comprehensive_Info_Handle
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgDispatchProc
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvDataPackCallbackFuncFn
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvLastFrame
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvMidFrame
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvFirstFrame
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR30FrameStreamByptCIR30Frame
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR20FrameStreamByptCIR20Frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR20Frame
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveHeadAndTail
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR30Frame
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_AddTail
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_SetEvent
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_DataRevise
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_SetEvent
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBootConfigArea
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSoftwareVersion
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Query_Handle
</UL>

<P><STRONG><a name="[2f8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2f9]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHostName
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Can_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgDispatchProc
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendBufSet
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRecBufSet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiInitDevice
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvDataPackCallbackFuncFn
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Check
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvLastFrame
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvMidFrame
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvFirstFrame
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRemoveTimeOutDataPack
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanClearAllRecvBuffer
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_DataReSend
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_FreeEvent
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressOut
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Output_Ethernet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckDectect
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANHost_Handle
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RouteTest
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Query_Handle
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EquipmentSta
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Output_CAN
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR20FrameStreamByptCIR20Frame
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveHeadAndTail
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildptCIR20FrameStream
</UL>

<P><STRONG><a name="[2fb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f5]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressOut
</UL>

<P><STRONG><a name="[1a8]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSoftwareVersion
</UL>

<P><STRONG><a name="[8d]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressOut
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Output_Ethernet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSoftwareVersion
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Query_Handle
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Output_CAN
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetProc
</UL>

<P><STRONG><a name="[ec]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPortByUnitJP
</UL>

<P><STRONG><a name="[e0]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Check
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_CheckPair
</UL>

<P><STRONG><a name="[1a6]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnitChinaNameByPort
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnitJPByPort
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSoftwareVersion
</UL>

<P><STRONG><a name="[1a7]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSoftwareVersion
</UL>

<P><STRONG><a name="[262]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Check
</UL>

<P><STRONG><a name="[265]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Check
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[269]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[26a]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Check
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Check
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Check
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressOut
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Check
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Check
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveUpdateReceive
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Check
</UL>

<P><STRONG><a name="[295]"></a>fgetc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fgetc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[2fc]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2fd]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2fe]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2ff]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[300]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[263]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[268]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[267]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[26d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[68]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[301]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[302]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[303]"></a>__I$use$semihosting$fgetc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusesemig.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[304]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>Chip_CCAN_ClearNewDataFlag</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, c_can.o(i.Chip_CCAN_ClearNewDataFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Chip_CCAN_ClearNewDataFlag &rArr; Chip_CCAN_TransferMsgObject
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_CCAN_TransferMsgObject
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>Chip_CCAN_GetInterruptMsg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, c_can.o(i.Chip_CCAN_GetInterruptMsg))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>

<P><STRONG><a name="[231]"></a>GetPLL1Param</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, system_lpc43xx.o(i.GetPLL1Param))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetPLL1Param
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClockFreq
</UL>

<P><STRONG><a name="[270]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[306]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[f3]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgressOut
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSoftwareVersion
</UL>

<P><STRONG><a name="[307]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[308]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[272]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[309]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[30a]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[25b]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Output_Ethernet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Output_CAN
</UL>

<P><STRONG><a name="[30b]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[260]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[30c]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[30d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[30e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[30f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[19c]"></a>alloc_mem</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, at_mem.o(i.alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send_report
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
</UL>

<P><STRONG><a name="[27a]"></a>arp_cache_add</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, at_arp.o(i.arp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = arp_cache_add &rArr; arp_cache_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrd_u32be
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
</UL>

<P><STRONG><a name="[281]"></a>arp_cache_early</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, at_arp.o(i.arp_cache_early))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = arp_cache_early &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[283]"></a>arp_cache_find</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, at_arp.o(i.arp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrd_u32be
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>

<P><STRONG><a name="[284]"></a>arp_cache_update</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, at_arp.o(i.arp_cache_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = arp_cache_update &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrd_u32be
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[28d]"></a>arp_init</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, at_arp.o(i.arp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
</UL>

<P><STRONG><a name="[24e]"></a>arp_notify</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at_arp.o(i.arp_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = arp_notify &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[286]"></a>arp_process</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, at_arp.o(i.arp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = arp_process &rArr; arp_send_reply &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrd_u32be
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[28a]"></a>calc_chksum16be</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, at_lib.o(i.calc_chksum16be))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = calc_chksum16be
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
</UL>

<P><STRONG><a name="[28b]"></a>chksum16_buf</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at_lib.o(i.chksum16_buf))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_get_chksum
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_process
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_chksum16be
</UL>

<P><STRONG><a name="[2a8]"></a>chksum16_val</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_lib.o(i.chksum16_val))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_process
</UL>

<P><STRONG><a name="[28c]"></a>eth_chk_adr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_ethernet.o(i.eth_chk_adr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eth_chk_adr &rArr; mem_comp
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[248]"></a>eth_init_link</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at_ethernet.o(i.eth_init_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eth_init_link &rArr; init_ethernet &rArr; write_PHY
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_crc32
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[250]"></a>eth_run_link</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, at_ethernet.o(i.eth_run_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = eth_run_link &rArr; icmp_process &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_process
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_process
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrd_u32be
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[294]"></a>eth_send_frame</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, at_ethernet.o(i.eth_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_frame
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrd_u32be
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[1a5]"></a>fread</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, fread.o(i.fread), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_MD5_Code2
</UL>

<P><STRONG><a name="[289]"></a>free_mem</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, at_mem.o(i.free_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_run_local
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send_report
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
</UL>

<P><STRONG><a name="[29b]"></a>get_rnd32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at_system.o(i.get_rnd32))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_process
</UL>

<P><STRONG><a name="[24a]"></a>icmp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_icmp.o(i.icmp_init))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[290]"></a>icmp_process</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, at_icmp.o(i.icmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = icmp_process &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_chksum16be
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_run_local
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[252]"></a>icmp_run_engine</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, at_icmp.o(i.icmp_run_engine))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = icmp_run_engine &rArr; icmp_send_message &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[2a6]"></a>ifree_mem</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, at_mem.o(i.ifree_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ifree_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_in_queue
</UL>

<P><STRONG><a name="[24b]"></a>igmp_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at_igmp.o(i.igmp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[299]"></a>igmp_is_member</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at_igmp.o(i.igmp_is_member))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = igmp_is_member &rArr; igmp_map_group &rArr; mem_comp
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_map_group
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[291]"></a>igmp_process</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, at_igmp.o(i.igmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = igmp_process &rArr; igmp_map_group &rArr; mem_comp
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_map_group
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_get_chksum
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rnd32
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrd_u32be
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[253]"></a>igmp_run_host</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, at_igmp.o(i.igmp_run_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = igmp_run_host &rArr; igmp_send_report &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send_report
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[c9]"></a>init_TcpNet</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at_system.o(i.init_TcpNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_TcpNet &rArr; init_system &rArr; arp_notify &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mem
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetProc
</UL>

<P><STRONG><a name="[29d]"></a>init_mem</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, at_mem.o(i.init_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
</UL>

<P><STRONG><a name="[28f]"></a>ip_chk_frame</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, at_ip.o(i.ip_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ip_chk_frame &rArr; igmp_is_member &rArr; igmp_map_group &rArr; mem_comp
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_is_member
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_chk_adr
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_run_local
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[29f]"></a>ip_get_locadr</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, at_ip.o(i.ip_get_locadr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ip_get_locadr &rArr; mem_comp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[249]"></a>ip_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at_ip.o(i.ip_init))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[251]"></a>ip_run_local</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, at_ip.o(i.ip_run_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ip_run_local &rArr; icmp_process &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_process
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[296]"></a>ip_send_frame</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, at_ip.o(i.ip_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slip_send_frame
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_send_frame
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send_report
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
</UL>

<P><STRONG><a name="[27d]"></a>is_subnet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at_lib.o(i.is_subnet))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[ce]"></a>main_TcpNet</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, at_system.o(i.main_TcpNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = main_TcpNet &rArr; run_system &rArr; igmp_run_host &rArr; igmp_send_report &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetProc
</UL>

<P><STRONG><a name="[27c]"></a>mem_comp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at_lib.o(i.mem_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_process
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_map_group
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_is_member
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_chk_adr
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
</UL>

<P><STRONG><a name="[280]"></a>mem_copy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at_lib.o(i.mem_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send_report
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
</UL>

<P><STRONG><a name="[28e]"></a>mem_crc32</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at_lib.o(i.mem_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_crc32 &rArr; get_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
</UL>

<P><STRONG><a name="[2a4]"></a>mem_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_lib.o(i.mem_set))
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>

<P><STRONG><a name="[2a0]"></a>mem_test</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at_lib.o(i.mem_test))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
</UL>

<P><STRONG><a name="[24d]"></a>nbns_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at_nbns.o(i.nbns_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nbns_init &rArr; udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[27e]"></a>nrd_u32be</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_lib.o(i.nrd_u32be))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_process
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[19d]"></a>put_in_queue</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at_ethernet.o(i.put_in_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = put_in_queue &rArr; ifree_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifree_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[2a5]"></a>str_up_case</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at_lib.o(i.str_up_case))
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_up_case
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_up_case
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[b7]"></a>timer_tick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at_system.o(i.timer_tick))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[19e]"></a>udp_get_buf</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at_udp.o(i.udp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_get_buf &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_SendData
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[1a0]"></a>udp_get_socket</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, at_udp.o(i.udp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_SendPort_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_ReceivePort_Init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_init
</UL>

<P><STRONG><a name="[24c]"></a>udp_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at_udp.o(i.udp_init))
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[1a1]"></a>udp_open</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, at_udp.o(i.udp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_SendPort_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_ReceivePort_Init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_init
</UL>

<P><STRONG><a name="[292]"></a>udp_process</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, at_udp.o(i.udp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_process
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16_val
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_run_local
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[19f]"></a>udp_send</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, at_udp.o(i.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16_val
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16_buf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrd_u32be
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_SendData
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9b]"></a>MsgTx_QueueAdd</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, appmsgtxpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = MsgTx_QueueAdd &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgTxProc
</UL>

<P><STRONG><a name="[a1]"></a>Board_MsgTxQueue_Init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, appmsgtxpro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgTxProc
</UL>

<P><STRONG><a name="[9d]"></a>MsgTx_QueueProc</STRONG> (Thumb, 732 bytes, Stack size 32 bytes, appmsgtxpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = MsgTx_QueueProc &rArr; CanSendDataPackToCanBus
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendDataPackToCanBus
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskMsgTxProc
</UL>

<P><STRONG><a name="[47]"></a>EthernetDataSend</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, appnetpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = EthernetDataSend &rArr; OSFlagPost &rArr; OS_FlagTaskRdy &rArr; OS_FlagUnlink
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemApply
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appnetpro.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>EthernetRevDataPost</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, appnetpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = EthernetRevDataPost &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemApply
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appnetpro.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>NetSendProc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, appnetpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = NetSendProc &rArr; UDP_SendData &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_SendData
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNetProc
</UL>

<P><STRONG><a name="[103]"></a>uart_set_divisors</STRONG> (Thumb, 496 bytes, Stack size 80 bytes, lpc43xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[117]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetByte
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[11f]"></a>I2C_getNum</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransferComplete
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferComplete
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransferData
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveHandler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHandler
</UL>

<P><STRONG><a name="[116]"></a>I2C_Start</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[120]"></a>I2C_Stop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHandler
</UL>

<P><STRONG><a name="[118]"></a>I2C_SendByte</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[119]"></a>I2C_GetByte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[11c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
</UL>

<P><STRONG><a name="[11d]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc43xx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
</UL>

<P><STRONG><a name="[12b]"></a>getPClock</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lpc43xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getPClock
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
</UL>

<P><STRONG><a name="[12c]"></a>converUSecToVal</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lpc43xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPClock
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[12d]"></a>converPtrToTimeNum</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lpc43xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[13f]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, c_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
</UL>

<P><STRONG><a name="[131]"></a>EnQueue</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, c_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = EnQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSend
</UL>

<P><STRONG><a name="[136]"></a>DeQueue</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, c_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSend
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, c_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
</UL>

<P><STRONG><a name="[149]"></a>initializeSpifi</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mx66l51235f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = initializeSpifi &rArr; spifiInitDevice &rArr; spifiPartDetect &rArr; devDetect &rArr; findDeviceMatch &rArr; checkExtendedMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiRegisterFamily
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiInitDevice
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiGetHandleMemSize
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_Init
</UL>

<P><STRONG><a name="[15d]"></a>checkExtendedMatch</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spifilib_dev_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = checkExtendedMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findDeviceMatch
</UL>

<P><STRONG><a name="[15c]"></a>findDeviceMatch</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, spifilib_dev_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = findDeviceMatch &rArr; checkExtendedMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkExtendedMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devDetect
</UL>

<P><STRONG><a name="[15e]"></a>devDetect</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, spifilib_dev_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = devDetect &rArr; findDeviceMatch &rArr; checkExtendedMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findDeviceMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPartDetect
</UL>

<P><STRONG><a name="[15f]"></a>spifiPartDetect</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, spifilib_dev_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = spifiPartDetect &rArr; devDetect &rArr; findDeviceMatch &rArr; checkExtendedMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devDetect
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiInitDevice
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiGetHandleMemSize
</UL>

<P><STRONG><a name="[166]"></a>spifiCalculateHandleSize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spifilib_dev_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiInitDevice
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiGetHandleMemSize
</UL>

<P><STRONG><a name="[161]"></a>spifi_HW_SetIDATA</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spifilib_dev_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
</UL>

<P><STRONG><a name="[162]"></a>spifi_HW_SetMEMCMD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spifilib_dev_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
</UL>

<P><STRONG><a name="[160]"></a>spifi_HW_ResetController</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spifilib_dev_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
</UL>

<P><STRONG><a name="[163]"></a>spifi_HW_WaitRESET</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spifilib_dev_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
</UL>

<P><STRONG><a name="[16a]"></a>prvSetWREN</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvSetWREN
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_WaitCMD
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicePageProgram
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseSubBlock
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseBlock
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseAll
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetStatusRegister
</UL>

<P><STRONG><a name="[16d]"></a>prvGetStatusRegister</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvGetStatusRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_WaitCMD
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_GetData8
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceLockCmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceGetStatus
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckWriteState
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetQuadMode
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWaitUnBusy
</UL>

<P><STRONG><a name="[16f]"></a>prvWaitUnBusy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvWaitUnBusy &rArr; prvGetStatusRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicePageProgram
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseSubBlock
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseBlock
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseAll
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetStatusRegister
</UL>

<P><STRONG><a name="[170]"></a>prvSetStatusRegister</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvSetStatusRegister &rArr; prvWaitUnBusy &rArr; prvGetStatusRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_WaitCMD
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetData8
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetCmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWaitUnBusy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetWREN
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceLockCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetQuadMode
</UL>

<P><STRONG><a name="[172]"></a>prvSetQuadMode</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvSetQuadMode &rArr; prvSetStatusRegister &rArr; prvWaitUnBusy &rArr; prvGetStatusRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetStatusRegister
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceSetUnsetOptions
</UL>

<P><STRONG><a name="[173]"></a>prvCheckWriteState</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCheckWriteState &rArr; prvGetStatusRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicePageProgram
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseSubBlock
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseBlock
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseAll
</UL>

<P><STRONG><a name="[53]"></a>deviceGetID</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = deviceGetID
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_WaitCMD
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_GetData8
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_mac_2b_stat.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>deviceGetStatus</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = deviceGetStatus &rArr; prvGetStatusRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicePageProgram
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseSubBlock
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_mac_2b_stat.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>deviceGetMemoryModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_mac_2b_stat.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>deviceLockCmd</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = deviceLockCmd &rArr; prvSetStatusRegister &rArr; prvWaitUnBusy &rArr; prvGetStatusRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetStatusRegister
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetStatusRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_mac_2b_stat.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>deviceEraseAll</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = deviceEraseAll &rArr; prvCheckWriteState &rArr; prvGetStatusRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_WaitCMD
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetCmd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckWriteState
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWaitUnBusy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetWREN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_mac_2b_stat.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>deviceEraseBlock</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = deviceEraseBlock &rArr; deviceGetStatus &rArr; prvGetStatusRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_WaitCMD
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetAddr
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetCmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceGetStatus
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckWriteState
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWaitUnBusy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetWREN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_mac_2b_stat.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>deviceEraseSubBlock</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = deviceEraseSubBlock &rArr; deviceGetStatus &rArr; prvGetStatusRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_WaitCMD
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetAddr
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetCmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceGetStatus
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckWriteState
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWaitUnBusy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetWREN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_mac_2b_stat.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>devicePageProgram</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = devicePageProgram &rArr; deviceGetStatus &rArr; prvGetStatusRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_WaitCMD
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetData8
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetAddr
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetCmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceGetStatus
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckWriteState
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWaitUnBusy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetWREN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_mac_2b_stat.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>deviceRead</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = deviceRead
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_WaitCMD
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_GetData8
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetAddr
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_SetCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_mac_2b_stat.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>deviceSetUnsetOptions</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = deviceSetUnsetOptions &rArr; prvSetQuadMode &rArr; prvSetStatusRegister &rArr; prvWaitUnBusy &rArr; prvGetStatusRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetQuadMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_mac_2b_stat.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>deviceReset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_mac_2b_stat.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>devSetup</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = devSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_mac_2b_stat.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>devRegister</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFI_REG_FAMILY_Macronix_2Byte_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_mac_2b_stat.o(.text)
</UL>
<P><STRONG><a name="[16b]"></a>spifi_HW_SetCmd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceRead
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicePageProgram
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseSubBlock
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseBlock
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseAll
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceGetID
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetStatusRegister
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetStatusRegister
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetWREN
</UL>

<P><STRONG><a name="[174]"></a>spifi_HW_SetAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceRead
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicePageProgram
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseSubBlock
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseBlock
</UL>

<P><STRONG><a name="[16e]"></a>spifi_HW_GetData8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceRead
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceGetID
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetStatusRegister
</UL>

<P><STRONG><a name="[171]"></a>spifi_HW_SetData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicePageProgram
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetStatusRegister
</UL>

<P><STRONG><a name="[16c]"></a>spifi_HW_WaitCMD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spifilib_fam_mac_2b_stat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceRead
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicePageProgram
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseSubBlock
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseBlock
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceEraseAll
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceGetID
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetStatusRegister
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetStatusRegister
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetWREN
</UL>

<P><STRONG><a name="[178]"></a>SPI_Para_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, spiflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[179]"></a>LPC43xx_SPI_SendRecvByte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetStatus
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReceiveData
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadWriteByte
</UL>

<P><STRONG><a name="[17b]"></a>Flash_ReadWriteByte</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_FLASH_RdID
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceRead
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceProgram
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceEraseBlock
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceeEraseSubBlock
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvGetStatusRegister
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvSetWREN
</UL>

<P><STRONG><a name="[17c]"></a>SPI_prvSetWREN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_prvSetWREN &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadWriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceProgram
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceEraseBlock
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceeEraseSubBlock
</UL>

<P><STRONG><a name="[17d]"></a>SPI_prvGetStatusRegister</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadWriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceGetStatus
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvCheckWriteState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvWaitUnBusy
</UL>

<P><STRONG><a name="[17e]"></a>SPI_prvWaitUnBusy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_prvWaitUnBusy &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvGetStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceProgram
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceEraseBlock
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceeEraseSubBlock
</UL>

<P><STRONG><a name="[17f]"></a>SPI_prvCheckWriteState</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_prvCheckWriteState &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvGetStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceProgram
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceEraseBlock
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceeEraseSubBlock
</UL>

<P><STRONG><a name="[180]"></a>SPI_deviceGetStatus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_deviceGetStatus &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvGetStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceRead
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceProgram
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceEraseBlock
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceeEraseSubBlock
</UL>

<P><STRONG><a name="[182]"></a>SPI_deviceeEraseSubBlock</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_deviceeEraseSubBlock &rArr; SPI_deviceGetStatus &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceGetStatus
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvCheckWriteState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvWaitUnBusy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvSetWREN
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadWriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EraseSector
</UL>

<P><STRONG><a name="[183]"></a>SPI_deviceEraseBlock</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, spiflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceGetStatus
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvCheckWriteState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvWaitUnBusy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvSetWREN
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadWriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EraseBlock
</UL>

<P><STRONG><a name="[184]"></a>SPI_deviceProgram</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_deviceProgram &rArr; SPI_deviceGetStatus &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceGetStatus
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvCheckWriteState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvWaitUnBusy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_prvSetWREN
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadWriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Program
</UL>

<P><STRONG><a name="[185]"></a>SPI_deviceRead</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_deviceRead &rArr; SPI_deviceGetStatus &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceGetStatus
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadWriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
</UL>

<P><STRONG><a name="[186]"></a>SPI_EraseBlock</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, spiflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceEraseBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Erase
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_EntireErase
</UL>

<P><STRONG><a name="[187]"></a>SPI_EraseSector</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_EraseSector &rArr; SPI_deviceeEraseSubBlock &rArr; SPI_deviceGetStatus &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceeEraseSubBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_EraseSectors
</UL>

<P><STRONG><a name="[188]"></a>SPI_Program</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SPI_Program &rArr; SPI_deviceProgram &rArr; SPI_deviceGetStatus &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Write
</UL>

<P><STRONG><a name="[189]"></a>SPI_Read</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SPI_Read &rArr; SPI_deviceRead &rArr; SPI_deviceGetStatus &rArr; SPI_prvGetStatusRegister &rArr; Flash_ReadWriteByte &rArr; LPC43xx_SPI_SendRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_deviceRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Read
</UL>

<P><STRONG><a name="[191]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig
</UL>

<P><STRONG><a name="[18f]"></a>UartConfig</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UartConfig &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[192]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig
</UL>

<P><STRONG><a name="[19b]"></a>tx_descr_init</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, eth_lpc43xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[19a]"></a>rx_descr_init</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, eth_lpc43xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[57]"></a>udpsend_callback</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, ethernetudp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udpsend_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetudp.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>udprev_callback</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, ethernetudp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udprev_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetudp.o(.text)
</UL>
<P><STRONG><a name="[1af]"></a>WAE_SetEvent</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, dataresend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemApply
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_SetEvent
</UL>

<P><STRONG><a name="[1b0]"></a>WAE_FreeEvent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dataresend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = WAE_FreeEvent &rArr; MemFree &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_CheckPair
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_SetEvent
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_ReSend
</UL>

<P><STRONG><a name="[1b1]"></a>WAE_DataRevise</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dataresend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WAE_DataRevise
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_DataReSend
</UL>

<P><STRONG><a name="[1b2]"></a>WAE_DataReSend</STRONG> (Thumb, 350 bytes, Stack size 72 bytes, dataresend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1340 + Unknown Stack Size
<LI>Call Chain = WAE_DataReSend &rArr; UARTDatapbCIR20SendPost &rArr; BuildptCIR20FrameStream &rArr; BuildptCIR20Frame &rArr; CalCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR30SendPost
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR20SendPost
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowNumGet
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetDataSendPost
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSendPost
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_DataRevise
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_ReSend
</UL>

<P><STRONG><a name="[1b8]"></a>WAE_ReSend</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dataresend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1356 + Unknown Stack Size
<LI>Call Chain = WAE_ReSend &rArr; WAE_DataReSend &rArr; UARTDatapbCIR20SendPost &rArr; BuildptCIR20FrameStream &rArr; BuildptCIR20Frame &rArr; CalCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_DataReSend
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAE_FreeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_Proc
</UL>

<P><STRONG><a name="[1bd]"></a>DataReSend_Set</STRONG> (Thumb, 88 bytes, Stack size 104 bytes, datatransfer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = DataReSend_Set &rArr; DataReSend_SetEvent &rArr; WAE_SetEvent &rArr; MemApply &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowNumGet
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataReSend_SetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetDatapbCIR30FullSendPost
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataSimpleSendPost
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCANDataFullSendPost
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR30FullSendPost
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR30SimpleSendPost
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDatapbCIR20SimpleSendPost
</UL>

<P><STRONG><a name="[1c6]"></a>CANBusControlJudge</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, canbuscontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = CANBusControlJudge &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANStatusGet
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANbusControlPeriodHandle
</UL>

<P><STRONG><a name="[1e1]"></a>OS_InitTaskStat</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1e4]"></a>OS_InitTaskIdle</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1e5]"></a>OS_InitEventList</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1e7]"></a>OS_InitTCBList</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1ea]"></a>OS_InitRdyList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1e9]"></a>OS_InitMisc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1f0]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1fb]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OS_FlagTaskRdy &rArr; OS_FlagUnlink
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[201]"></a>OS_FlagBlock</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_FlagBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[225]"></a>OSTmr_Alloc</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
</UL>

<P><STRONG><a name="[228]"></a>OSTmr_Free</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[227]"></a>OSTmr_Unlink</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[22d]"></a>OSTmr_Link</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTmr_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[5a]"></a>OSTmr_Task</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(.text)
</UL>
<P><STRONG><a name="[22f]"></a>OSTmr_InitTask</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[23d]"></a>WaitUs</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMR_GPIO_Init
</UL>

<P><STRONG><a name="[243]"></a>GetpUartbyNum</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uartrxpro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_QueueProc
</UL>

<P><STRONG><a name="[63]"></a>CanRecvDataPackCallbackFuncFn</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, canrxpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = CanRecvDataPackCallbackFuncFn &rArr; MQ_AddTail &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_AddTail
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canrxpro.o(.text)
</UL>
<P><STRONG><a name="[27f]"></a>arp_cache_alloc</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, at_arp.o(i.arp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[27b]"></a>arp_is_cacheable</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, at_arp.o(i.arp_is_cacheable))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[285]"></a>arp_proc_response</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, at_arp.o(i.arp_proc_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_proc_response &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
</UL>

<P><STRONG><a name="[287]"></a>arp_send_reply</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, at_arp.o(i.arp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = arp_send_reply &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_frame
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
</UL>

<P><STRONG><a name="[282]"></a>arp_send_request</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, at_arp.o(i.arp_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_frame
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_notify
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
</UL>

<P><STRONG><a name="[29e]"></a>ip_get_chksum</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_ip.o(i.ip_get_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ip_get_chksum &rArr; calc_chksum16be
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_chksum16be
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[297]"></a>icmp_send_message</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, at_icmp.o(i.icmp_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = icmp_send_message &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_chksum16be
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_run_engine
</UL>

<P><STRONG><a name="[298]"></a>igmp_get_chksum</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at_igmp.o(i.igmp_get_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_get_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_process
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send_report
</UL>

<P><STRONG><a name="[29a]"></a>igmp_map_group</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, at_igmp.o(i.igmp_map_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = igmp_map_group &rArr; mem_comp
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_process
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_is_member
</UL>

<P><STRONG><a name="[29c]"></a>igmp_send_report</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, at_igmp.o(i.igmp_send_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = igmp_send_report &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_get_chksum
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_run_host
</UL>

<P><STRONG><a name="[2a7]"></a>udp_port_in_use</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at_udp.o(i.udp_port_in_use))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
</UL>

<P><STRONG><a name="[66]"></a>nbns_listener</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, at_nbns.o(i.nbns_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nbns_listener &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_up_case
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_nbns.o(i.nbns_init)
</UL>
<P><STRONG><a name="[2a3]"></a>get_crc32</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at_lib.o(i.get_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_crc32
</UL>

<P><STRONG><a name="[273]"></a>_fp_digits</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[271]"></a>_printf_core</STRONG> (Thumb, 1762 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[275]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[274]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[65]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[64]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
